// See gradle/common.gradle for more or less global build logic applied to the subprojects

buildscript {
    repositories {
        // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        //Spotbugs
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.0.0"
    }
}

plugins {
    // Needed for extending the "clean" task to also delete custom stuff defined here like analytics config
    id "base"

    id "idea"
    // For the "Build and run using: Intellij IDEA | Gradle" switch
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.7"
}

ext {
    // Overall version number for NUI's various elements
    nuiVersion = "1.4.0-SNAPSHOT"

    // JOML version we're tracking
    jomlVersion = "1.9.25"

    dirAnalyticsConfig = 'gradle/analytics'
}

// Declare remote repositories we're interested in - library files will be fetched from here
repositories {
    // Artifactory instance for our stuff and  binaries not readily available elsewhere
    maven {
        name "Terasology Artifactory"
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        allowInsecureProtocol true  // ðŸ˜±
    }
}

// Define configurations for analytics config
configurations {
    codeAnalyticsConfig
}

dependencies {
    // Config for our code analytics lives in a centralized repo: https://github.com/MovingBlocks/TeraConfig
    codeAnalyticsConfig group: 'org.terasology.config', name: 'codemetrics', version: '1.3.2', ext: 'zip'
}

task extractAnalyticsConfig(type: Copy) {
    description = "Extracts configuration files for our analytics from the zip we fetched as a dependency"
    from {
        configurations.codeAnalyticsConfig.collect {
            zipTree(it)
        }
    }
    into "$rootDir/$dirAnalyticsConfig"
}

// Include deletion of extracted stuff in the global clean task. Without the doLast it runs on *every* execution ...
clean.doLast {
    new File(dirAnalyticsConfig).deleteDir()
    println "Cleaned root - don't forget to re-extract stuff! 'gradlew extractAnalyticsConfig' will do so"
}
